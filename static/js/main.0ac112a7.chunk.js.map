{"version":3,"sources":["components/Lines/index.js","components/Node/index.js","constants/index.js","models/Node.js","models/Tree.js","utils.js","models/Level.js","components/Tree/index.js","data/index.js","App.js","index.js"],"names":["HALF_NODE_WIDTH","NODE_WIDTH","NODE_OUTER_WIDTH","TOTAL_LEVEL_GAP","LINE_OFFSET","Lines","props","parentId","parentNodeRef","nodeRefs","totalWeight","weight","firstNodeRect","getBoundingClientRect","lastNodeRect","length","levelRect","parentNode","parentCenterX","left","mostLeftPoint","Math","min","lineWidth","max","right","connectorLeft","siblingsOnTheRight","LOW_LEVEL_GAP","HIGH_LEVEL_GAP","offset","siblingsPaths","Array","fill","reduce","acc","cur","i","concat","react_default","a","createElement","key","d","siblingsConnector","parentLine","class","data-parentId","style","top","width","height","nodeStyle","Node","handleRef","el","_this$props","_this","onRef","id","node","_this$props$node","this","classes","classnames","hasParent","ref","React","Component","children","arguments","undefined","data","Object","classCallCheck","Tree","root","levels","getLevels","depth","forEach","child","keys","map","Level","Number","isLeaf","level","nodes","generateTrees","treeData","nodeDict","nodeData","parent","push","filter","state","mounted","handleNodeRef","setState","_this2","tree","Node_Node","nodesMap","levelNodes","levelNodesByParentId","rv","x","sortedLevelNodesArr","values","sort","b","reversedIndex","index","arr","lastNodes","lastItemInNodes","indexOf","prepareNodes","entries","_ref","_ref2","slicedToArray","nodeObj","components_Lines","isRootTree","renderLevels","src_data","require","App","trees","flat","sortedTrees","branched","components_Tree_Tree","roots","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0ac112a7.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { NODE_WIDTH } from \"../../constants\";\n\nimport \"./style.css\";\n\nconst NODE_MARGIN = 24;\nconst HALF_NODE_WIDTH = NODE_WIDTH / 2;\nconst NODE_OUTER_WIDTH = NODE_WIDTH + NODE_MARGIN;\nconst TOTAL_LEVEL_GAP = 60;\nconst LINE_OFFSET = 2;\n\nfunction Lines(props) {\n  const { parentId, parentNodeRef, nodeRefs, totalWeight, weight } = props;\n\n  const firstNodeRect = nodeRefs[0].getBoundingClientRect();\n  const lastNodeRect = nodeRefs[nodeRefs.length - 1].getBoundingClientRect();\n  const levelRect = nodeRefs[0].parentNode.parentNode.getBoundingClientRect();\n  const parentNodeRect = parentNodeRef.getBoundingClientRect();\n\n  const parentCenterX = parentNodeRect.left + HALF_NODE_WIDTH;\n\n  const mostLeftPoint = Math.min(\n    firstNodeRect.left + HALF_NODE_WIDTH,\n    parentCenterX\n  );\n  const mostRightPoint = Math.max(\n    lastNodeRect.right - HALF_NODE_WIDTH,\n    parentCenterX\n  );\n  const lineWidth = mostRightPoint - mostLeftPoint;\n\n  const connectorLeft = mostLeftPoint - levelRect.left;\n  const siblingsOnTheRight =\n    firstNodeRect.left + HALF_NODE_WIDTH - parentCenterX > 0;\n\n  const LOW_LEVEL_GAP = (TOTAL_LEVEL_GAP / (totalWeight + 1)) * weight;\n  const HIGH_LEVEL_GAP = TOTAL_LEVEL_GAP - LOW_LEVEL_GAP;\n\n  // sibling lines\n  const offset =\n    (siblingsOnTheRight\n      ? firstNodeRect.left - mostLeftPoint + HALF_NODE_WIDTH\n      : 0) + LINE_OFFSET;\n\n  const siblingsPaths = Array(nodeRefs.length)\n    .fill()\n    .reduce((acc, cur, i) => {\n      return acc.concat(\n        <path\n          key={i}\n          d={`M${offset +\n            i * NODE_OUTER_WIDTH},${LOW_LEVEL_GAP} l00,${HIGH_LEVEL_GAP}`}\n        />\n      );\n    }, []);\n\n  // siblings connector\n  const siblingsConnector = `M${LINE_OFFSET},${LOW_LEVEL_GAP} l${lineWidth},00 `;\n\n  // add parent line\n  const parentLine = `M${(siblingsOnTheRight\n    ? 0\n    : parentCenterX - mostLeftPoint) + LINE_OFFSET},00 l00,${LOW_LEVEL_GAP}`;\n\n  return (\n    <svg\n      class=\"lines\"\n      data-parentId={parentId}\n      style={{\n        top: -TOTAL_LEVEL_GAP,\n        left: connectorLeft,\n        width: lineWidth + LINE_OFFSET * 2,\n        height: TOTAL_LEVEL_GAP\n      }}\n    >\n      {siblingsPaths}\n      <path d={siblingsConnector} />\n      <path d={parentLine} />\n    </svg>\n  );\n}\n\nexport default Lines;\n","import React from 'react'\nimport classnames from \"classnames\";\n\nimport { NODE_WIDTH, NODE_HEIGHT } from '../../constants';\n\nimport \"./style.css\";\n\nconst nodeStyle = { width: NODE_WIDTH, height: NODE_HEIGHT };\n\nexport default class Node extends React.Component {\n  handleRef = (el) => {\n    const { onRef, node: { id } } = this.props;\n    if (onRef) {\n      onRef(id, el);\n    }\n  }\n\n  render() {\n    const { node: { id, parentId } } = this.props;\n    const classes = classnames(\"node\", { hasParent: !!parentId })\n\n    return (\n      <div\n        style={nodeStyle}\n        ref={this.handleRef}\n        class={classes}>{id}</div>\n    );\n  }\n}\n","export const NODE_WIDTH = 72;\nexport const NODE_HEIGHT = 60;","export default class Node {\n    constructor(id, parentId, children = [], data) {\n        this.id = id;\n        this.parentId = parentId;\n        this.children = children;\n        this.data = data;\n    }\n\n    get isRoot() {\n        return !this.parentId;\n    }\n\n    get isLeaf() {\n        return this.children.length === 0;\n    }\n}","import { getLevels } from \"../utils\";\n\nexport default class Tree {\n    constructor(root) {\n        this.root = root;\n        this.levels = getLevels(root, 1);\n    }\n\n    get height() {\n        return Object.keys(this.levels).length + 1;\n    }\n\n    get isRootTree() {\n        return this.root.isLeaf;\n    }\n}","import Node from \"./models/Node\";\nimport Tree from \"./models/Tree\";\nimport Level from \"./models/Level\";\n\nexport function generateTrees(treeData) {\n    // build a node dictionary\n    const nodeDict = {};\n    treeData.forEach(nodeData => {\n        const node = new Node(nodeData.id, nodeData.parent, [], nodeData);\n        nodeDict[node.id] = node;\n    });\n\n    // form childrens\n    treeData.forEach(nodeData => {\n        if (nodeData.parent) {\n            const node = nodeDict[nodeData.id];\n            const parentNode = nodeDict[nodeData.parent];\n            parentNode.children.push(node);\n        }\n    });\n\n    return Object\n        .keys(nodeDict)\n        .filter(id => !nodeDict[id].parentId)\n        .map(id => new Tree(nodeDict[id]));\n}\n\n/**\n * Returns an object with level keys and values of child nodes at that level\n */\nexport function getLevels(parentNode, depth, levels = {}) {\n    if(parentNode.children.length > 0) {\n        levels[depth] = (levels[depth] || []).concat(parentNode.children)\n        parentNode.children.forEach(child => {\n            getLevels(child, depth + 1, levels)\n        })\n    }\n\n    return Object.keys(levels).map(key => new Level(Number(key), levels[key]));\n}\n\n/**\n * Returns an object from an array of objects grouped by given key\n */\nexport function groupBy(xs, key) {\n    return xs.reduce((rv, x) => {\n      (rv[x[key]] = rv[x[key]] || []).push(x);\n      return rv;\n    }, {});\n  }","export default class Level {\n    constructor(level, nodes = []) {\n        this.level = level;\n        this.nodes = nodes;\n    }\n}","import React from 'react';\n\nimport Lines from \"../Lines\";\nimport Node from \"../Node\";\nimport { groupBy } from '../../utils';\n\nimport \"./style.css\";\n\n// forms an object that groups nodes with their weights by their parentId\nfunction prepareNodes(levelNodes) {\n  const levelNodesByParentId = groupBy(levelNodes, \"parentId\");\n  const levelNodesArr = Object.values(levelNodesByParentId);\n  const sortedLevelNodesArr = levelNodesArr.sort((a,b) => b.length - a.length);\n\n  let reversedIndex = -1;\n  return sortedLevelNodesArr.reduce((acc, cur, index, arr) => {\n    const parentId = cur[0].parentId;\n\n    // swap weights of parents with the same amount of children if they are in the first half of the level\n    if (reversedIndex === -1) {\n      const restHaveSameAmountOfChild = arr[index + 1] && cur.length === arr[index + 1].length;\n      if (restHaveSameAmountOfChild) {\n        const lastNodes = arr[arr.length - 1];\n        const lastItemInNodes = lastNodes[lastNodes.length - 1];\n        const lastChildIndexInLevel = levelNodes.map(node => node.id).indexOf(lastItemInNodes.id);\n        const inFirstHalf = lastChildIndexInLevel < levelNodes.length / 2;\n        if (inFirstHalf) {\n          reversedIndex = index;\n        }\n      }\n    }\n\n    let weight;\n    if (reversedIndex !== -1) {\n      weight = index - reversedIndex + 1;\n    } else {\n      weight = arr.length - index;\n    }\n\n    acc[parentId] = {\n      weight,\n      nodes: levelNodesByParentId[parentId]\n    }\n\n    return acc;\n  }, {});\n}\n\nexport default class Tree extends React.Component {\n  nodeRefs = {};\n\n  state = {\n    mounted: false\n  };\n\n  componentDidMount() {\n    this.setState({ mounted: true })\n  }\n\n  handleNodeRef = (id, el) => {\n    this.nodeRefs[id] = el;\n  }\n\n  renderLevels() {\n    const { mounted } = this.state;\n    const { tree } = this.props;\n\n    const rootLevel = (\n      <div class=\"level\" key=\"root\">\n        <Node onRef={this.handleNodeRef} node={tree.root}/>\n      </div>\n    );\n\n    const otherLevels = tree.levels.map((level, i) => {\n      const nodesMap = prepareNodes(level.nodes);\n      const totalWeight = Object.keys(nodesMap).length;\n\n      return (\n        <div class=\"level\" key={i}>\n          {Object.entries(nodesMap).map(([parentId, nodeObj]) => {\n            const nodeRefs = nodeObj.nodes.map(node => this.nodeRefs[node.id]);\n            const parentNodeRef = this.nodeRefs[parentId];\n            return [\n              mounted && parentNodeRef && (\n                  <Lines\n                    totalWeight={totalWeight}\n                    weight={nodeObj.weight}\n                    nodeRefs={nodeRefs}\n                    parentNodeRef={parentNodeRef}/>\n              ),\n              <div class=\"nodes\">\n                  {nodeObj.nodes.map(node => <Node key={node.id} onRef={this.handleNodeRef} node={node}/>)}\n              </div>\n            ]\n          })}\n        </div>\n      )\n    });\n\n    return [\n      rootLevel,\n      otherLevels\n    ]\n  }\n\n  render() {\n    const { tree } = this.props;\n\n    if (tree.isRootTree) {\n      return <Node node={tree.root}/>\n    }\n\n    return (\n      <div class=\"tree\">\n        {this.renderLevels()}\n      </div>\n    );\n  }\n}\n","export default [\n  require(\"./tree0\"),\n  require(\"./tree1\"),\n  require(\"./tree2\"),\n  require(\"./tree3\"),\n  require(\"./tree4\"),\n  require(\"./tree5\")\n];\n","import React, { Component } from \"react\";\n\nimport Tree from \"./components/Tree\";\nimport data from \"./data\";\nimport { generateTrees } from \"./utils\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  trees = data.map(generateTrees).flat();\n\n  get roots() {\n    return this.trees.filter(tree => tree.isRootTree);\n  }\n\n  get branched() {\n    return this.trees.filter(tree => !tree.isRootTree);\n  }\n\n  render() {\n    const sortedTrees = this.branched.sort((a, b) => a.height - b.height);\n\n    return (\n      <div class=\"app\">\n        <h3>Branched trees</h3>\n        <div class=\"trees\">\n          {sortedTrees.map(tree => (\n            <Tree key={tree.root.id} tree={tree} />\n          ))}\n        </div>\n\n        <h3>Root trees</h3>\n        <div class=\"trees\">\n          {this.roots.map(tree => (\n            <Tree key={tree.root.id} tree={tree} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}